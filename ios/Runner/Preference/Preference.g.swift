// Autogenerated from Pigeon (v22.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif


private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct Preference {
  var key: String
  var value: Any? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> Preference? {
    let key = pigeonVar_list[0] as! String
    let value: Any? = pigeonVar_list[1]

    return Preference(
      key: key,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      key,
      value,
    ]
  }
}

private class PreferencePigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return Preference.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PreferencePigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Preference {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PreferencePigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PreferencePigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PreferencePigeonCodecWriter(data: data)
  }
}

class PreferencePigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PreferencePigeonCodec(readerWriter: PreferencePigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PreferenceApi {
  func setValue(preference: Preference) throws -> Bool
  func remove(key: String) throws -> Bool
  func clear() throws -> Bool
  func getAll() throws -> [Preference]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PreferenceApiSetup {
  static var codec: FlutterStandardMessageCodec { PreferencePigeonCodec.shared }
  /// Sets up an instance of `PreferenceApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PreferenceApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let setValueChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_sample.PreferenceApi.setValue\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setValueChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let preferenceArg = args[0] as! Preference
        do {
          let result = try api.setValue(preference: preferenceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setValueChannel.setMessageHandler(nil)
    }
    let removeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_sample.PreferenceApi.remove\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let keyArg = args[0] as! String
        do {
          let result = try api.remove(key: keyArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeChannel.setMessageHandler(nil)
    }
    let clearChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_sample.PreferenceApi.clear\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearChannel.setMessageHandler { _, reply in
        do {
          let result = try api.clear()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearChannel.setMessageHandler(nil)
    }
    let getAllChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_sample.PreferenceApi.getAll\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAllChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAll()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAllChannel.setMessageHandler(nil)
    }
  }
}
